version: '3.7'
services:
  # Service to run the notification service for ETL process with decaf and stellar blockchain
  notification-etl-service:
    image: notification-etl-service:latest
    container_name: notification-etl-service
    env_file:
      - docker.env
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    restart: always
    ports:
      - '3090:3090' # Port to access the notification service API
    depends_on:
      # Declare dependencies for startup
      - postgres
      - rabbitmq
    networks:
      - notification-api-network
  # Service to run the mock server for testing the notification service with decaf API
  decaf-api-mockserver:
    image: mockserver/mockserver:latest
    container_name: decaf-api-mockserver
    ports:
      - "1080:1080"
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/spec.json
      # Hot reload when the spec.json changes (useful for development)
      MOCKSERVER_WATCH_INITIALIZATION_JSON: "true"
    volumes:
      # bind the config for easy editing
      - ./config-mock-server:/config
    networks:
      - notification-api-network
  # Service to run the PostgresSQL database for the notification service
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=notification-service
    ports:
      - '5432:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - notification-api-network
  # Service to run RabbitMQ and handle the message queue for notification service
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=notification_service_api_mq
      - RABBITMQ_DEFAULT_PASS=notification_service_api_mq
    ports:
      - "5672:5672" # RabbitMQ for AMQP protocol
      - "15672:15672" #RabbitMQ Management UI
      - "15692:15692" #Prometheus Exporter
    volumes:
      # configure the RabbitMQ queue via the init-queue.sh script
      - ./rabbit-mq-script-config/init-queue.sh:/docker-entrypoint-initdb.d/init-queue.sh
    # Run the RabbitMQ server and the init-queue.sh script to have the default queue for notification service
    command: [ '/bin/bash', '-c', 'rabbitmq-server & sleep 10 && /docker-entrypoint-initdb.d/init-queue.sh && tail -f /dev/null' ]
    networks:
      - notification-api-network
networks:
  notification-api-network:
