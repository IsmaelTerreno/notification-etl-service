version: '3.7'
services:
  # Service to run RabbitMQ and handle the message queue for notification service
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=notification_service_api_mq
      - RABBITMQ_DEFAULT_PASS=notification_service_api_mq
    ports:
      - "5672:5672" # RabbitMQ for AMQP protocol
      - "15672:15672" #RabbitMQ Management UI
      - "15692:15692" #Prometheus Exporter
    volumes:
      # configure the RabbitMQ queue via the init-queue.sh script
      - ./rabbit-mq-script-config/init-queue.sh:/docker-entrypoint-initdb.d/init-queue.sh
    # Run the RabbitMQ server and the init-queue.sh script to have the default queue for notification service
    command: [ '/bin/bash', '-c', 'rabbitmq-server & sleep 10 && /docker-entrypoint-initdb.d/init-queue.sh && tail -f /dev/null' ]
    networks:
      - notification-api-network
  # Service to run Prometheus for monitoring the notification service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"  # Prometheus UI
    networks:
      - notification-api-network
  # Service to run Grafana for monitoring the notification service
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    # if you are running as root set it to 0
    # else find the right id with the id -u command
    user: '0'
    environment:
      - GF_SERVER_ROOT_URL=http://my.grafana.server/
      - GF_INSTALL_PLUGINS=grafana-clock-panel,yesoreyeram-infinity-datasource,maormil-rabbitmq-datasource
    restart: unless-stopped
    volumes:
      # Grafana data storage
      - ./grafana-storage:/var/lib/grafana
      # Grafana configuration for dashboard import
      # - ./dashboard-monitoring-grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"  # Grafana UI
    networks:
      - notification-api-network
  # Service to run the PostgresSQL exporter for the prometheus monitoring service
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/notification-service?sslmode=disable"
    links:
      - prometheus
    networks:
      - notification-api-network
networks:
  notification-api-network:
